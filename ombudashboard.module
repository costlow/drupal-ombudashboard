<?php

/**
 * @file ombudashboard.module
 *
 *   Implements the dashboard and siteconfig functionality.
 *   Dashboard blocks are defined in a file ombudashboard.admin_blocks.inc
 *   that must live in the active front-end theme
 *
 */

/**
 * Implements hook_menu().
 */
function ombudashboard_menu() {
  $items['admin/dashboard'] = array(
    'title' => 'Dashboard',
    'page callback' => 'ombudashboard_page',
    'access callback' => 'user_access',
    'access arguments' => array('access the dashboard page'),
    'weight' => -20,
  );
  $items['admin/siteconfig'] = array(
    'title' => 'Site Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('siteconfig_form'),
    'access callback' => 'user_access',
    'access arguments' => array('configure ombu site'),
    'type' => MENU_CALLBACK,
    'weight' => 2,
    'file' => 'siteconfig.inc.php',
  );
  $items['admin/dashboard/autocomplete_node_titles'] = array(
    'page callback' => 'ombudashboard_node_title_autocomplete',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('access the dashboard page'),
    'weight' => - 20,
  );
  $items['admin/dashboard/supplementary-content/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ombudashboard_supplementary_form', 3),
    'access arguments' => array('edit supplementary content'),
    'type' => MENU_CALLBACK,
    'file' => 'supplementary_content.inc.php',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ombudashboard_theme($existing, $type, $theme, $path) {
  return array(
    'dashboard_page' => array(
      'variables' => array('blocks' => NULL),
    ),
    'ombu_admin_block_content' => array(
      'variables' => array('content' => NULL),
    ),
    'ombu_admin_block_content_manage' => array(
      'variables' => array('content' => NULL),
    ),
    'ombu_toolbar' => array(
      'variables' => array('vars' => NULL),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function ombudashboard_permission() {
  return array(
    'access the dashboard page' => array(
      'title' => t('Access the dashboard page'),
      'description' => t('Allow access to the dashboard page.'),
    ),
    'redirect from admin to dashboard' => array(
      'title' => t('Redirect from admin to dashboard'),
      'description' => t('Redirect users with this permission enabled to the dashboard from /admin'),
    ),
    'configure ombu site' => array(
      'title' => t('Configure ombu site'),
      'description' => t('Allow user to configure the site.'),
    ),
    'show dashboard toolbar' => array(
      'title' => t('Show dashboard toolbar'),
      'description' => t('Show the dashboard toolbar.'),
    ),
    'edit supplementary content' => array(
      'title' => t('Edit supplementary content'),
      'description' => t('Allow user to edit supplementary content.'),
    ),
  );
}

/**
 * Implements hook_user_login().
 */
function ombudashboard_user_login(&$edit, $account) {
  // Redirect to Dashboard if they have permissions
  if (user_access('access the dashboard page')) {
    $_GET['destination'] = 'admin/dashboard';
  }
  elseif (!$_GET['destination']) {
    drupal_goto('<front>');
  }
}

/**
 * Implements hook_user_XXX().
 * @todo: roll this out into a hook_form_alter()
 */
function ombudashboard_user_XXX($edit, $account) {
  global $user;
  // Site admin can only edit client users
  if ($user->uid != $account->uid && in_array('site admin', $user->roles) && !in_array('client user', $account->roles)) {
    drupal_goto('admin/user/user');
  }

  // deployment managers can only edit client users & site admins
  if ($user->uid != $account->uid && in_array('deployment manager', $user->roles) && !( in_array('client user', $account->roles) || in_array('site admin', $account->roles) )) {
    drupal_goto('admin/user/user');
  }
}

/**
 * Implements hook_admin_paths_alter().
 */
function ombudashboard_admin_paths_alter(&$paths) {
  // Treat all user pages as administrative.
  $paths['user'] = TRUE;
  $paths['user/*'] = TRUE;
}

/**
 * Implements hook_init().
 * - Redirect user to admin/dashboard if they're not permissioned or user 1
 * - Redirect user from admin/user/permissions if they're not user 1
 */
function ombudashboard_init() {
  global $user;
  if ((arg(0) == 'admin' && !arg(1)) && ( user_access('redirect from admin to dashboard') && $user->uid != 1 )) {
    drupal_goto('admin/dashboard');
  }

  if (trim($_GET['q'], '/') == 'admin/user/permissions' && $user->uid != 1) {
    drupal_goto('admin/user/user');
  }

}

/**
 * Implements hook_page_alter().
 */
function ombudashboard_page_alter(&$page) {
  $out = '';

  global $theme;
  if ($theme != variable_get('admin_theme', '')) {

    // Add Google Analytics if this is the front & a key is set
    if ($google_analytics_key = variable_get('google_analytics_key', '')) {
      $out .= <<<JS
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("$google_analytics_key");
pageTracker._trackPageview();
} catch(err) {}</script>
JS;
      $page['page_bottom']['google_analytics'] = array(
        '#markup' => $out,
      );
    }
  }

  // Add Toolbar
  /* Disable toolbar for now and use D7 default toolbar.
  if (user_access('show dashboard toolbar')) {
    $page['page_bottom']['ombu_toolbar'] = array(
      '#theme' => 'ombu_toolbar',
    );
  }
  */

  global $conf;
  global $theme_key;
  if ($theme_key == $conf['admin_theme']) {
    drupal_add_js(array('backend' => TRUE, 'frontend' => FALSE), array('type' => 'setting', 'scope' => 'footer'));
  }
  else {
    drupal_add_js(array('backend' => FALSE, 'frontend' => TRUE), array('type' => 'setting', 'scope' => 'footer'));
  }

  return $out;
}

/**
 * Page Preprocess
 * @todo: This could be done in a much better way, maybe hook_page_alter()?
 */
function ombudashboard_preprocess_page(&$vars) {

  global $theme;
  global $user;

  if ($theme == variable_get('admin_theme', '')) {
    if ($_GET['q'] == 'admin/dashboard' || $user->uid == 0) {
      $vars['breadcrumb'] = '';
    }
    else {
      $vars['breadcrumb'] = '<div class="breadcrumb">' . l('&laquo; Back to Dashboard', 'admin/dashboard', array('html' => TRUE)) . '</div>';
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function ombudashboard_menu_alter(&$items) {

  // Rename Taxonomy task to Categories
  $items['admin/structure/taxonomy/%taxonomy_vocabulary/add/term']['title'] = 'Add Category';

  // Block access to menu edit & delete unless user is 'system'
  $items['admin/structure/menu-customize/%menu/edit']['access callback'] = 'ombudashboard_user_is_system';
  $items['admin/structure/menu-customize/%menu/delete']['access callback'] = 'ombudashboard_user_is_system';
}

/**
 * Implements hook_views_api().
 */
function ombudashboard_views_api() {
  return array('api' => 2.0);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ombudashboard_user_is_system() {
  global $user;
  if ($user->uid == 1) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Dashboard page callback
 */
function ombudashboard_page() {
  $module_path = drupal_get_path('module', 'ombudashboard');
  include_once $module_path . '/supplementary_content.inc.php';

  $admin_blocks_path = conf_path() . '/ombudashboard.admin_blocks.inc';
  if (!file_exists($admin_blocks_path)) {
    $example_path = drupal_get_path('module', 'ombudashboard') . '/ombudashboard.admin_blocks.inc.example';
    drupal_set_message("Unable to load $admin_blocks_path. <br />A sample file can be found at $example_path" . ".example.", 'error');
    return theme('dashboard_page', array('block' => array()));
  }

  require_once DRUPAL_ROOT . '/' . $admin_blocks_path;
  $blocks = _ombudashboard_get_admin_blocks();
  return array(
    '#theme' => 'dashboard_page',
    '#blocks' => $blocks,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'ombudashboard') . '/js/ombudashboard_page.js' => array(
          'scope' => 'footer'
        ),
      ),
    ),
  );
}

/**
 * This function formats the dashboard page for viewing.
 * It's based on theme_admin_page() in system.admin.inc
 *
 * @param $blocks
 *   An array of blocks to display. Each array should include a
 *   'title', a 'description', a formatted 'content' and a
 *   'position' which will control which container it will be
 *   in. This is usually 'left' or 'right'.
 * @ingroup themeable
 */
function theme_dashboard_page($variables) {
  $blocks = $variables['blocks'];
  $stripe = 0;
  $container = array();

  foreach ($blocks as $block) {

    if (empty($block['content'])) {
      continue;
    }

    if ($block['theme']) {
      $block['content'] = theme($block['theme'], array('content' => $block['content']));
    }

    $block['show'] = TRUE;
    if ($block_output = theme('admin_block', array('block' => $block))) {
      if (empty($block['position'])) {
        // perform automatic striping.
        $block['position'] = ++$stripe % 2 ? 'left' : 'right';
      }
      if (!isset($container[$block['position']])) {
        $container[$block['position']] = '';
      }
      $container[$block['position']] .= $block_output;
    }
  }

  $output = '<div class="admin clear-block">';
  $output .= '<div class="compact-link">';
  $output .= '</div>';

  foreach ($container as $id => $data) {
    $output .= '<div class="' . $id . ' clear-block">';
    $output .= $data;
    $output .= '</div>';
  }
  $output .= '</div>';
  return $output;
}


/**
 * This function formats a dashboard page block to manage nodes of various types
 *
 * All other blocks should use theme_ombu_admin_block_content()
 *
 * @param $content
 *   an array of grouped arrays
 *   array(
 *     'title' => 'FAQs',
 *       'description' => 'Description',
 *       'operations' => array(
 *         0 => array(
 *            'title' => 'Add',
 *            'href' => 'node/add/faq',
 *            'localized_options' => array(),
 *         ),
 *         1 => array(
 *            'title' => 'Manage',
 *            'href' => 'admin/dashboard/manage-content/faq',
 *            'localized_options' => array(),
 *         ),
 *      ),
 *   );
 * @ingroup themeable
 */
function theme_ombu_admin_block_content_manage($variables) {
  $content = $variables['content'];
  $output = '';

  if (!$content) {
    return $output;
  }

  $output .= '<ul class="admin-list">';
  $output .= '<li id="core-content-operations"><dl>';
  foreach ($content as $item) {

    if (empty($item)) {
      continue;
    }

    if (isset($item['operations'])) {
      $t = str_replace('&', 'and', $item['title']);
      $class = isset($item['type']) ? ' class="' . $item['type'] . '"' : '';
      $output .= '<dt' . $class . '>' . $t . '</dt>';

      $output .= '<dd' . $class . '>';
      foreach ($item['operations'] as $key => $op) {
        $output .= ' ' . l($op['title'], $op['href'], $op['localized_options']);
      }
      $output .= "</dd>";
    }
    else {
      $output .= '<dt>' . l($item['title'], $item['href'], $item['localized_options']) . '</dt>';
    }
  }
  $output .= '</dl><div class="description">Add or manage existing content by type.</div></li>';
  $output .= '<li id="code-content-node-picker">';
  $form = drupal_get_form('ombudashboard_find_node');
  $output .= drupal_render($form);
  $output .= '<div class="description">Find content by title.</div></li></ul>';
  return $output;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_ombu_admin_block_content($variables) {
  $content = $variables['content'];
  if (!$content) {
    return '';
  }

  $output = '<ul class="admin-list">';
  foreach ($content as $item) {

    if (empty($item)) {
      continue;
    }

    $output .= '<li>';
    if (isset($item['operations'])) {
      $t = str_replace('&', 'and', $item['title']);
      $output .= '<dt class="' . $item['type'] . '">';
      $output .= $t . ': ';

      foreach ($item['operations'] as $key => $op) {
        if ($key != 0) {
          $output .= ' - ';
        }
        $output .= l($op['title'], $op['href'], $op['localized_options']);
      }
      $output .= '</dt>';
    }
    else {
      $output .= '<dt>' . l($item['title'], $item['href'], $item['localized_options']) . '</dt>';
    }
    if (isset($item['description'])) {
      $output .= '<dd>' . $item['description'] . '</dd>';
    }
    $output .= '</li>';
  }
  $output .= '</ul>';
  return $output;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_ombu_toolbar($variables) {
  $vars = $variables['vars'];

  $drawer_counter = 0;
  $drawer = '';
  $menu = '';

  // This Page
  $link = l('This Page', drupal_get_path_alias($_REQUEST['q']), array(
    'fragment' => 'drawer-' . $drawer_counter,
    'attributes' => array(
      'class' => array('drawer-link'),
    ),
  ));
  $this_page_links = '';
  foreach (module_invoke_all('current_page_links') as $l) {

    if (is_string($l)) {

      $this_page_links .= $l;
    }
    else {

      if (!isset($l['options'])) {
        $l['options'] = array();
      }

      // TODO Please change this theme call to use an associative array for the $variables parameter.
      $this_page_links .= theme('menu_link', l($l['title'], $l['href'], $l['options']));
    }
  }

  $this_page_links = menu_primary_local_tasks() . $this_page_links
            . menu_secondary_local_tasks();

  if ($this_page_links) {
    // TODO Please change this theme call to use an associative array for the $variables parameter.
    $menu .= '<ul id="toolbar-local">'
                . theme('menu_link', $link, FALSE, '', FALSE, '') . '</ul>';
    $drawer .= '<ul id="drawer-' . $drawer_counter . '" class="drawer">'
                . $this_page_links . '</ul>';
    $drawer_counter++;
  }

  // Load admin blocks
  $admin_blocks_path = conf_path() . '/ombudashboard.admin_blocks.inc';
  if (!file_exists($admin_blocks_path)) {
    $example_path = drupal_get_path('module', 'ombudashboard') . '/ombudashboard.admin_blocks.inc.example';
    drupal_set_message("Unable to load $admin_blocks_path. <br />A sample file can be found at $example_path" . ".example.", 'error');
    return '';
  }
  require_once DRUPAL_ROOT . '/' . $admin_blocks_path;
  $blocks = _ombudashboard_get_admin_blocks();
  $dashboard = '';
  foreach ($blocks as $i => $block) {

    if (empty($block['content'])) {
      continue;
    }

    // Top level item
    $class = '';
    if ($i == 0) {
      $class = 'first';
    }
    if ($i == count($blocks) - 1) {
      $class = 'last';
    }

    $link = l($block['title'], 'admin/dashboard', array(
      'html' => TRUE, // In case there are &amp; or &raquo; in the title
      'fragment' => 'drawer-' . $drawer_counter,
      'attributes' => array(
        'class' => array('drawer-link'),
      ),
    ));
    // TODO Please change this theme call to use an associative array for the $variables parameter.
    $dashboard .= theme('menu_link', $link, FALSE, '', FALSE, $class);

    // Drawer menu
    $drawer_class = ($block['title'] == 'Core Content') ? 'core-content' : '';
    $drawer .= '<ul id="drawer-' . $drawer_counter . '" class="drawer ' . $drawer_class . '">';
    foreach ($block['content'] as $j => $k) {

      if (empty($k)) {
        continue;
      }

      $class = '';
      if ($j == 0) {
        $class .= ' first';
      }
      if ($j == count($block['content']) - 1) {
        $class .= ' last';
      }

      // Content operations block
      if ($k['operations']) {

        $class .= ' operations';
        $link = '<span class="operation-object">' . $k['title'] . ':</span>';
        $ops = array();
        foreach ($k['operations'] as $o) {

          $ops[] = l($o['title'], $o['href'], $o['localized_options']);
        }
        $link .= implode('-', $ops);
      }
      else {

        if (!isset($k['localized_options'])) {
          $k['localized_options'] = array('attributes' => array());
        }
        if (!isset($k['localized_options']['attributes'])) {
          $k['localized_options']['attributes'] = array();
        }
        if ($k['description']) {
          $k['localized_options']['attributes']['title'] = $k['description'];
        }
        $link = l($k['title'], $k['href'], $k['localized_options']);
      }

      // TODO Please change this theme call to use an associative array for the $variables parameter.
      $drawer .= theme('menu_link', $link, FALSE, '', FALSE, $class);
    }
    $drawer .= '</ul>';
    $drawer_counter++;
  }
  $menu .= '<ul id="toolbar-menu">' . $dashboard . '</ul>';


  // Add user items
  $curr_path = base_path();
  if ($_REQUEST['q']) {
    $curr_path .= drupal_get_path_alias($_REQUEST['q']);
  }
  global $user;
  $menu .= <<<EOT
<ul id="toolbar-user">
    <li class="account first"><a title="Edit account" href="/user/$user->uid/edit">Welcome <strong>$user->name</strong></a></li>
    <li class=""><a href="/admin/dashboard">Dashboard</a></li>
    <li class=""><a href="/">Visit Site</a></li>
    <li class="logout"><a href="/logout">Log out</a></li>
    <li class="last"><a class="toolbar-collapse-button" href="$curr_path" title="Collapse Toolbar">Collapse Toolbar</a></li>
</ul>
EOT;

  $css_src = base_path() . drupal_get_path('module', 'ombudashboard') . '/toolbar/toolbar.css';
  $css_js = <<<EOL
    var link = document.createElement('link');
    link.setAttribute('rel', 'stylesheet');
    link.setAttribute('type', 'text/css');
    link.setAttribute('href', '$css_src');
    document.getElementsByTagName("head")[0].appendChild(link);
EOL;
  drupal_add_js($css_js, array('type' => 'inline', 'scope' => 'footer', 'cache' => FALSE));
  drupal_add_js(drupal_get_path('module', 'ombudashboard') . '/toolbar/toolbar.js', array('scope' => 'footer', 'cache' => FALSE));

  return <<<EOT
<div id="toolbar" class="toolbar overlay-displace-top clearfix toolbar-processed" style="display: none;">
    <div class="toolbar-expanded-items clearfix">
        <div class="toolbar-menu clearfix">
            $menu
        </div>
        <div class="toolbar-drawer clearfix">
            <div class="toolbar-shortcuts">
                $drawer
            </div>
            <a href="#close" class="close-drawer">Close</a>
        </div>
        <div class="shadow"></div>
    </div>
    <div class="toolbar-collapsed-items clearfix">
        <a class="toolbar-expand-button" title="Expand Toolbar" href="$curr_path">Expand Toolbar</a>
    </div>
</div>
EOT;
}

/**
 * Implements hook_current_page_links().
 * @return mixed
 *      Array of link items or string of rendered html
 */
function ombudashboard_current_page_links() {

  return NULL;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ombudashboard_content_edit($type, $label) {
  if (user_access('create ' . $type . ' content')) {
    $out = array(
      'title' => $label,
      'type' => $type,
      'operations' => array(
        array(
          'title' => 'Add',
          'href' => 'node/add/' . str_replace("_", "-", $type),
          'localized_options' => array(),
        ),
      ),
    );
    if (user_access('delete own ' . $type . ' content')) {
      $out['operations'][] = array(
        'title' => 'Manage',
        'href' => 'admin/dashboard/manage-content/' . $type,
        'localized_options' => array(),
      );
    }
  }
  return is_array($out) ? $out : array();
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ombudashboard_find_node($form) {

  $form['title'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'admin/dashboard/autocomplete_node_titles',
    '#size' => 45,
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Edit',
  );
  return $form;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ombudashboard_find_node_validate($form_id, $form_state) {
  if (!isset($form_state['values']['nid']) || !preg_match('/^\d+$/', $form_state['values']['nid'])) {
    form_set_error('title', 'Sorry, something went wrong trying to edit this page.');
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ombudashboard_find_node_submit($form_id, $form_state) {
  drupal_goto('node/' . $form_state['values']['nid'] . '/edit');
}


/**
 * Autocomplete
 */
function ombudashboard_node_title_autocomplete($string) {
  $items = array();

  $records = db_query("SELECT DISTINCT nid, title FROM {node} WHERE title LIKE :title", array(':title' => "%$string%"));

  foreach ($records as $row) {
    $items[$row->nid] = check_plain($row->title);
  }

  print drupal_json_output($items);
  exit;
}
